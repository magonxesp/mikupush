name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-app-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: app
        run: npm install

      - name: Build
        working-directory: app
        run: |
          npm run build:prod
          npm run make

      - name: List built artifacts
        working-directory: app
        run: Get-ChildItem -Path target -Recurse -Include *.exe,*.msi,*.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            app/target/make/zip/win32/*/*.zip
            app/target/make/*.dmg

  build-app-macos-intel:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: app
        run: npm install

      - name: Build
        working-directory: app
        run: |
          npm run build:prod
          npm run make

      - name: List built artifacts
        working-directory: app
        run: find target -name '*.dmg' -o -name '*.zip'

      - uses: actions/upload-artifact@v4
        name: Upload Artifacts
        with:
          name: macos-artifacts
          path: |
            app/target/make/zip/darwin/*/*.zip
            app/target/make/*.dmg

  build-app-macos-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: app
        run: npm install

      - name: Build
        working-directory: app
        run: |
          npm run build:prod
          npm run make

      - name: List built artifacts
        working-directory: app
        run: find target -name '*.dmg' -o -name '*.zip'

      - uses: actions/upload-artifact@v4
        name: Upload Artifacts
        with:
          name: macos-artifacts
          path: |
            app/target/make/zip/darwin/*/*.zip
            app/target/make/*.dmg

  build-app-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: app
        run: npm install

      - name: Build
        working-directory: app
        run: |
          npm run build:prod
          npm run make

      - name: List built artifacts
        working-directory: app
        run: find target -name '*.deb' -o -name '*.rpm' -o -name '*.zip'

      - uses: actions/upload-artifact@v4
        name: Upload Artifacts
        with:
          name: linux-artifacts
          path: |
            app/target/make/zip/linux/*/*.zip
            app/target/make/*.deb
            app/target/make/*.rpm

  build-server-binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build Server
        working-directory: server
        run: |
          mkdir target
          GOOS=windows GOARCH=arm64 go build -o target/server-windows-arm64.exe
          GOOS=windows GOARCH=amd64 go build -o target/server-windows-amd64.exe
          GOOS=darwin GOARCH=arm64 go build -o target/server-darwin-arm64
          GOOS=darwin GOARCH=amd64 go build -o target/server-darwin-amd64
          GOOS=linux GOARCH=arm64 go build -o target/server-linux-arm64
          GOOS=linux GOARCH=amd64 go build -o target/server-linux-amd64

      - uses: actions/upload-artifact@v4
        name: Upload Artifacts
        with:
          name: server-artifacts
          path: server/target/*

  create-release:
    needs:
      - build-app-windows
      - build-app-macos
      - build-app-linux
      - build-server-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Resolve current version
        run: |
          read -r CURRENT_VERSION < VERSION
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.CURRENT_VERSION }}
          draft: true
          prerelease: false
          files: release-artifacts/*
